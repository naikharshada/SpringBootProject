package com.example.demo.service;

import java.util.List;
import java.util.Map;

import org.apache.catalina.mapper.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.dto.StudentDto;
import com.example.demo.entity.Student;
import com.example.demo.exception.NoStudentFoundException;
import com.example.demo.repository.StudentRepository;

@Service
public class StudentServiceImpl implements StudentService{
	
	@Autowired
	private StudentRepository studentRepository;
	
	@Override
	public Student findStudentById(Integer rollNo) {		
	if(studentRepository.findById(rollNo).isEmpty())
		throw new NoStudentFoundException("No Student Found");
			return studentRepository.findById(rollNo).get();
	}

	@Override
	public String addStudent(Student student) {
		Student existStudent = studentRepository.findById(student.getRollNo()).orElse(null);
		if(existStudent == null) {
		studentRepository.save(student);
		return "student added successfully";
		} else {
			return "student already exist";
		}
	}

	@Override
	public String updateStudent(Student student) {
		Student existStudent = studentRepository.findById(student.getRollNo()).orElse(null);
		if(existStudent == null) {
			throw new NoStudentFoundException("No student found");
		} else {
			studentRepository.save(student);
			return "student updated successfully";
		}
	}

	@Override
	public String deleteStudent(Integer rollNo) {
		if(studentRepository.findById(rollNo).isEmpty()) {
		throw new NoStudentFoundException("No Student Found");
		} else {
			studentRepository.deleteById(rollNo);
		   return "student deleted successfully";
		}
	}

	@Override
	public List<Student> getAllStudent() {
		return studentRepository.findAll();
	}

	@Override
	public Student getStudent(Integer rollNo) {
		if(studentRepository.findById(rollNo).isEmpty())
			throw new NoStudentFoundException("No Student Found");
		return studentRepository.findById(rollNo).get();
	}

	//JPAQL
	@Override
	public List<Student> getAllStudentUsingJPAQL() {
		return studentRepository.getAllStudentUsingJPAQL();
	}

	@Override
	public List<Student> getStudentByAddressUsingJPAQL(String Address) {
		if(studentRepository.getStudentByAddressUsingJPAQL(Address).isEmpty())
			throw new NoStudentFoundException("No student found");
		return studentRepository.getStudentByAddressUsingJPAQL(Address);
	}

	@Override
	public List<Student> getStudentByNameOrAddressUsingJPAQL(String Address, String name) {
		if(studentRepository.getStudentByNameOrAddressUsingJPAQL(Address, name).isEmpty())
			throw new NoStudentFoundException("No student found");
		return studentRepository.getStudentByNameOrAddressUsingJPAQL(Address, name);
	}
	
	@Override
	public Integer updateNameByRollnoJPAQL(int rollNo, String name) {
		Student existStudent = studentRepository.findById(rollNo).orElse(null);
		if(existStudent == null) {
			throw new NoStudentFoundException("No student found");
		} else {
		return studentRepository.updateNameByRollnoJPAQL(rollNo, name);
	 }
	}

	//Native
	@Override
	public List<Student> getAllStudentUsingNativeQuery() {
		return studentRepository.getAllStudentUsingNativeQuery();
	}

	@Override
	public List<Student> getStudentByAddressUsingNative(String Address) {
		if(studentRepository.getStudentByAddressUsingNative(Address).isEmpty())
			throw new NoStudentFoundException("No student found");
		return studentRepository.getStudentByAddressUsingNative(Address);
	}

	@Override
	public Integer updateNameByRollnoNative(String name, int rollNo) {
		return studentRepository.updateNameByRollnoNative(name, rollNo);
	}

	@Override
	public Integer insertStudentNative(int rollNo, String name, String Address) {
		return studentRepository.insertStudentNative(rollNo, name, Address);
	}

	@Override
	public Integer updateStudentNative(String name, String Address, int rollNo) {
		return studentRepository.updateStudentNative(name, Address, rollNo);
	}

	@Override
	public Integer deleteStudentNative(int rollNo) {
		return studentRepository.deleteStudentNative(rollNo);
	}

	//DToMapping
	@Override
	public String addStduentWithDto(StudentDto studentDto) {
		Student student = new Student();
		student.setRollNo(studentDto.getRollNo());
	    student.setName(studentDto.getName());
		student.setAddress(studentDto.getAddress());
		Student existStudent = studentRepository.findById(student.getRollNo()).orElse(null);
		if(existStudent == null) {
		studentRepository.save(student);
		return "student added successfully";
		} else {
			return "student already exist";
		}		
	}

	@Override
	public String updateStudentWithDto(StudentDto studentDto) {
		Student student = new Student();
		student.setRollNo(studentDto.getRollNo());
	    student.setName(studentDto.getName());
		student.setAddress(studentDto.getAddress());
		Student existStudent = studentRepository.findById(student.getRollNo()).orElse(null);
		if(existStudent == null) {
			throw new NoStudentFoundException("No student found");
		} else {
			studentRepository.save(student);
			return "student updated successfully";
		}
	}
}